# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from kingfisher_msgs/Sense.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class Sense(genpy.Message):
  _md5sum = "b0209acddc7f26d2e3dc1338d6c4df94"
  _type = "kingfisher_msgs/Sense"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# General MCU status for Kingfisher transmitted from the MCU
# to higher-level software on the /sense topic.

# Voltage level of battery, in volts
float32 battery

# Instantaneous current drawn by each motor, in amps.
float32 current_left
float32 current_right

# Temperature of PCB as measured by internal AVR thermometer,
# reported in degrees centigrade.
float32 pcb_temperature
bool fan_on

# Bitfield represents status of hobby R/C override.
uint8 RC_INRANGE=1
uint8 RC_INUSE=2
uint8 rc

# Pulse lengths received from the three R/C channels.
uint16 rc_throttle
uint16 rc_rotation
uint16 rc_enable
"""
  # Pseudo-constants
  RC_INRANGE = 1
  RC_INUSE = 2

  __slots__ = ['battery','current_left','current_right','pcb_temperature','fan_on','rc','rc_throttle','rc_rotation','rc_enable']
  _slot_types = ['float32','float32','float32','float32','bool','uint8','uint16','uint16','uint16']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       battery,current_left,current_right,pcb_temperature,fan_on,rc,rc_throttle,rc_rotation,rc_enable

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Sense, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.battery is None:
        self.battery = 0.
      if self.current_left is None:
        self.current_left = 0.
      if self.current_right is None:
        self.current_right = 0.
      if self.pcb_temperature is None:
        self.pcb_temperature = 0.
      if self.fan_on is None:
        self.fan_on = False
      if self.rc is None:
        self.rc = 0
      if self.rc_throttle is None:
        self.rc_throttle = 0
      if self.rc_rotation is None:
        self.rc_rotation = 0
      if self.rc_enable is None:
        self.rc_enable = 0
    else:
      self.battery = 0.
      self.current_left = 0.
      self.current_right = 0.
      self.pcb_temperature = 0.
      self.fan_on = False
      self.rc = 0
      self.rc_throttle = 0
      self.rc_rotation = 0
      self.rc_enable = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_4f2B3H().pack(_x.battery, _x.current_left, _x.current_right, _x.pcb_temperature, _x.fan_on, _x.rc, _x.rc_throttle, _x.rc_rotation, _x.rc_enable))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 24
      (_x.battery, _x.current_left, _x.current_right, _x.pcb_temperature, _x.fan_on, _x.rc, _x.rc_throttle, _x.rc_rotation, _x.rc_enable,) = _get_struct_4f2B3H().unpack(str[start:end])
      self.fan_on = bool(self.fan_on)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_4f2B3H().pack(_x.battery, _x.current_left, _x.current_right, _x.pcb_temperature, _x.fan_on, _x.rc, _x.rc_throttle, _x.rc_rotation, _x.rc_enable))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 24
      (_x.battery, _x.current_left, _x.current_right, _x.pcb_temperature, _x.fan_on, _x.rc, _x.rc_throttle, _x.rc_rotation, _x.rc_enable,) = _get_struct_4f2B3H().unpack(str[start:end])
      self.fan_on = bool(self.fan_on)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_4f2B3H = None
def _get_struct_4f2B3H():
    global _struct_4f2B3H
    if _struct_4f2B3H is None:
        _struct_4f2B3H = struct.Struct("<4f2B3H")
    return _struct_4f2B3H
